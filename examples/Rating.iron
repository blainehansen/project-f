#! template
.rating
	ul.list: @each (star of :starItems)
		li.star.{ star.active && 'active' }(@click={ stars.s(star.amount) })
			i.{ star.active ? 'fas fa-star' : 'far fa-star' }

	@if (:hasCounter): .counter
		span.score-rating {{: starsStr }}
		span.divider
		span.score-max {{: maxStr }}

#! script
import { Args, derived } from 'project-f'

function str(v: string | number) {
	return '' + v
}

export type Component = {
	props: { maxStars: number, hasCounter: boolean },
	syncs: { stars: number },
}

export function create({ maxStars, stars }: Args<Component>) {
	const starItems = derived((stars, maxStars) => {
		const items: { active: boolean, amount: number }[] = []
		for (let starIndex = 0; starIndex < maxStars; starIndex++)
			items.push({ active: starIndex + 1 <= stars, amount: starIndex + 1 })

		return items
	}, stars, maxStars)

	return { starItems, starsStr: derived(str, stars), maxStr: derived(str, maxStars) }
}

#! style lang="scss"
body {
	&.home {
		background: #ebebeb;
	}
	#app {
		font-family: 'Spartan', sans-serif;
		display: flex;
		align-items: center;
		justify-content: center;
		height: 100vh;
  }
}

.rating {
	display: flex;
	flex-direction: column;
	align-items: center;
	padding: 50px;
	color: #b7b7b7;
	background: #fff;
	border-radius: 8px;
	box-shadow: 0 6px 33px rgba(19, 18, 18, 0.09);
	.list {
		padding: 0;
		margin: 0 20px 0 0;
		&:hover {
			.star {
				color: #ffe100;
			}
		}
		.star {
			display: inline-block;
			font-size: 42px;
			transition: all .2s ease-in-out;
			cursor: pointer;
			&:hover {
				~ .star:not(.active) {
					color: inherit;
				}
			}
			&:first-child {
				margin-left: 0;
			}
			&.active {
				color: #ffe100;
			}
		}
	}
	.info {
		margin-top: 15px;
		font-size: 40px;
		text-align: center;
		display: table;
		.divider {
			margin: 0 5px;
			font-size: 30px;
		}
		.score-max {
			font-size: 30px;
			vertical-align: sub;
		}
	}
}
